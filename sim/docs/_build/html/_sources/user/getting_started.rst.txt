Getting started
===============

Last updated: 07/23/2018, Daniel Johansson

Download
--------

Download the ACN simulator from Github either by cloning the repository or download the source code directly.

Importing libraries
-------------------

Open the terminal window and change directory to the ``ACN-portal/sim`` folder. To use the simulator, create a new simulation script
(create a new python file) in this directory and import the necessary libraries and classes by including the following code
section at the top of the script:

.. code-block:: python

    from datetime import datetime
    from acnlib import TestCase
    from BaseAlgorithm import *
    from acnlib.OutputAnalyzer import OutputAnalyzer
    from acnlib.ACNsim import ACNsim

:TestCase:
    A TestCase defines which data the simulator will operate on. It also holds the current status of the
    simulation and saves the data of the simulation before it is passed to the simulation output.

:BaseAlgorithm:
    All scheduling algorithms must extend the ``BaseAlgotithm`` class in order to be used in the simulation.
    The ``BaseAlgorithm`` class also includes resources usefull for the scheduling algorithms, e.g. the API used to
    extract the relevant data to make an efficient algorithm.

:OutputAnalyzer:
    The ``OutputAnalyzer`` is a library for extracting and visualizing the status and result of a simulation.

:ACNsim:
    The ``ACNsim`` is the main class for the simulation. It handles all the interconnections of the other classes and
    runs the simulation.

Defining the scheduling algorithm
---------------------------------

The ``BaseAlgorithm`` module has already som predefined charging algorithms that can be used if no other algorithm has yet been
defined. The section :ref:`writing-a-scheduling-algorithm` covers how to implement a custom scheduling algorithm which can be used in the same way as the ones
covered in this section.

The predefined scheduling algorithms are:

:EarliestDeadlineFirst:
    An algorithm that prioritize the EV that has to depart first. All other EVs are charged with minimum rate.

:LeastLaxityFirst:
    An algorithm that prioritize the EV with least laxity first. All other EVs are charged with minimum rate.

:MLLF:
    Multi Least Laxity First. An algorithm that ranks the EVs according to their laxity and then prioritizes the EVs with
    least laxities. As the laxity ranking changes as the EVs charge there is an option to allow preemption of the sessions, i.e.
    an EV can interrupt another EV that is charging at full rate when it get a smaller laxity value.

To define which algorithm to use, simply create an object of the corresponding scheduling class to be used:

.. code-block:: python

    scheduler = EarliestDeadlineFirst()

Some scheduling algorithms can also take arguments:

.. code-block:: python

    scheduler = MLLF(preemtion=True, queue_length=2)



Creating a Test Scenario
------------------------

A test scenario can be generated on either real data from Caltech's ACN network, or from synthetic data from a statistical
model based on the data generated from the same network.

**From real data:**

When the ``TestCase`` module is imported and the session data is available,
the test case is generated by running the following piece of code:

.. code-block:: python

    test_case = TestCase.generate_test_case_local('sessions_data.pkl',
                                                  datetime.strptime("18/04/18", "%d/%m/%y"),
                                                  datetime.strptime("25/04/18", "%d/%m/%y"))

The charging session data used for this test case is taken from the file ``session_data.pkl``. The first argument entered into
the function ``generate_test_case_local`` is the name of the pickle_ file which is a serialized pyhton object, located in the
same folder as the simulation script.
The data in the file is stored as a two dimensional array where every row holds information about an EV charging sesssion.
Every row has four elements with index 0 to 3.

===== ========= ======================
Index Data type Description
===== ========= ======================
0     Timestamp Arrival time
----- --------- ----------------------
1     Timestamp Departure time
----- --------- ----------------------
2     float64   Energy demand [kWh]
----- --------- ----------------------
3     str       Charging station index
===== ========= ======================

The second and third element are the starting and ending times from where the data should be extracted from. If the ``session_data.pkl``
file has data for the whole year the, only one week in April will be extracted in the example in the code block above.

.. _pickle: https://docs.python.org/3/library/pickle.html

Additional arguments can be passed to the ``generate_test_case_local`` to change some simulation settings.

:voltage: Specifies the Grid voltage level. ``Standard value: 220 [V]``

:max_rate: Specifies the maximum charging rate for one EV. ``Standard value: 32 [A]``

:period: Specifies the length of one iteration of the simulation. ``Standard value: 1 [minute]``

**From statistical model:**

When using the statistical model to generate the test scenario there is no need for
manually creating a test scenario as this is handled by the simulator.

As the statistical model is data-driven there must be some session data present.
Therefore a file named ``session_data.pkl`` with the pickled sessions must be present in the
same folder as the simulation script for the model to be generated correctly.

Run simulation
--------------

**Real data:**

When both the test case and the scheduler has been defined it is possible to run the simulation. To do this, simply define
the simulator and then pass the test case and the scheduler objects to its simulation function:

.. code-block:: python

    acnsim = ACNsim()
    simulation_output = acnsim.simulate_real(scheduler, test_case)

This will run the full simulation and the data will be stored in the TestCase object.

**Statistical model:**

To run the simulation on the statistical model the only thing that has to be
defined is the scheduling algorithm. The code will look something like this:

.. code-block:: python

    acnsim = ACNsim()
    simulation_output = acnsim.simulate_model(scheduler)

It is also possible to pass more arguments to the ``simulate_model`` function:

:start: (datetime) Specifies what date the simulation will start. ``Standard value: today``

:end: (datetime) Specifies what date the simulation will end. ``Standard value: Two days from today``

:voltage: Specifies the Grid voltage level. ``Standard value: 220 [V]``

:max_rate: Specifies the maximum charging rate for one EV. ``Standard value: 32 [A]``

:period: Specifies the length of one iteration of the simulation. ``Standard value: 1 [minute]``

**Result:**

When running the simulation functions the result of the simulation is returned
as a SimulationOutput object. This object holds all relevant data of the simulation
and is used when analyzing and visualizing the simulation results.

Analyze simulation result
-------------------------

When the simulation has finished the simulation data is stored in the SimulationOutput object.

To see the result from the simulation it is possible to pass this object to the ``OutputAnalyzer`` library. There are several
functions that can be used to view different aspects of the simulation. The available functions are described here.

An code example is presented below which will plot the charging activity for each station, the EV behavior and the algorithm performance.
The corresponding output graphs are also included.

.. code-block:: python

    gd = OutputAnalyzer(simulation_output)
    gd.plot_station_activity()
    gd.plot_EV_behavioral_stats()
    gd.plot_algorithm_result_stats()


Sample code
-----------

Below follows a script with all the commands used above which can be used as a reference for using the simulator.

.. code-block:: python

    from datetime import datetime
    from acnlib import TestCase
    from BaseAlgorithm import *
    from acnlib.OutputAnalyzer import OutputAnalyzer
    from acnlib.ACNsim import ACNsim

    scheduler = MLLF()
    acnsim = ACNsim()
    simulation_output = acnsim.simulate_model(scheduler, period=1)

    gd = OutputAnalyzer(simulation_output)
    gd.plot_station_activity()
    gd.plot_EV_behavioral_stats()
    gd.plot_algorithm_result_stats()
